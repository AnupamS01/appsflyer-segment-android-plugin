name: Release plugin to production

on:
  pull_request:
    types:
      - closed
    branches:
      # - 'master'
      - 'dev/add-release-workflow'

jobs:
  Deploy-To-Production:
    if: github.event.pull_request.merged == true && startsWith(github.head_ref, 'releases/')
    # runs-on: ubuntu-latest
    runs-on: 
      - self-hosted
      - segment-android
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: PR branch check
      uses: mdecoleman/pr-branch-name@1.2.0
      id: vars
      with:
        repo-token: ${{ secrets.CI_GITHUB_TOKEN }}       
    - name: Determine release tag and release branch
      run: |
        TAG=$(echo "${{ steps.vars.outputs.branch }}" | grep -Eo '[0-9]+.[0-9]+.[0-9]+')
        echo "PLUGIN_VERSION=$TAG" >> $GITHUB_ENV
        echo "RELEASE_BRANCH_NAME=${{ steps.vars.outputs.branch }}" >> $GITHUB_ENV
        echo "push new release >> $TAG"   
    - name: Create release and tag
      env:
        TAG: ${{env.PLUGIN_VERSION}}
      uses: "actions/github-script@v5"
      with:
        script: |
          try {
            await github.rest.repos.createRelease({
              draft: false,
              generate_release_notes: false,
              name: process.env.TAG,
              owner: context.repo.owner,
              prerelease: false,
              repo: context.repo.repo,
              tag_name: process.env.TAG
            });
          } catch (error) {
            core.setFailed(error.message);
          }
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: '11' 

    - name: Grant execute permission for gradlew
      run: |
        chmod +x ./gradlew
      
    - name: Publish package
      # wraped the signing.password with single quotes as the password could contain special characters
      # run: ~/Desktop/AppsFlyer/Segment/appsflyer-segment-android-plugin/gradlew publish
      # env:
        # OSSRH_USERNAME: ${{secrets.OSSRH_USERNAME}}
        # OSSRH_PASSWORD: ${{secrets.OSSRH_PASSWORD}}
        # OSSRH_GPG_SECRET_KEY_ID: ${{secrets.OSSRH_GPG_SECRET_KEY_ID}}
        # OSSRH_GPG_SECRET_KEY_PASSWORD: ${{secrets.OSSRH_GPG_SECRET_KEY_PASSWORD}}
        # OSSRH_GPG_SECRET_KEY: ${{secrets.OSSRH_GPG_SECRET_KEY}}
      # run: |
      #   mkdir -p "~/.gradle"
      #   rm  ~/.gradle/gradle.properties
      #   echo $OSSRH_GPG_SECRET_KEY_ID >> ~/.gradle/gradle.properties
      #   echo $OSSRH_GPG_SECRET_KEY_PASSWORD >> ~/.gradle/gradle.properties
      #   echo $OSSRH_PASSWORD >> ~/.gradle/gradle.properties
      #   echo $OSSRH_USER_NAME >> ~/.gradle/gradle.properties
      #   echo "$OSSRH_GPG_SECRET_KEY" | awk 'NR == 1 { print "ORG_GRADLE_PROJECT_signingKey=" } 1' ORS='\\n' >> ~/.gradle/gradle.properties
      #   ./gradlew clean run publishToSonaType closeSonatypeStagingRepository
      run: |
        ./gradlew publish

    # Step 8
    # Optional step, will enable you to see what you have released as well here on GitHub 
    # - name: Upload Artifacts
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: release-build-libs
    #     path: build/libs
    #     retention-days: 3  


    - name: Notify with SLack
      uses: slackapi/slack-github-action@v1.23.0
      with:
        payload: |
          {
            "appsflyer_version": "${{env.PLUGIN_VERSION}}"
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.CI_SLACK_WEBHOOK_URL }}    